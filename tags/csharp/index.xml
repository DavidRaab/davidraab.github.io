<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on David Raab</title>
    <link>https://davidraab.github.io/tags/csharp/</link>
    <description>Recent content in Csharp on David Raab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://davidraab.github.io/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functions are interfaces</title>
      <link>https://davidraab.github.io/posts/functions-are-interfaces/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/functions-are-interfaces/</guid>
      <description>When I started to learn C# around 2013 there were certainly new things I came into contact. Some of them had todo with the fact that I primarily used Perl, a dynamic typed language, but in some sense the language features of Perl were also far ahead of C# back then, leading to different solutions and how you use a language.&#xA;Back at that time I realised that a lot of programmers were into a &amp;ldquo;newly&amp;rdquo; thing.</description>
    </item>
    <item>
      <title>Object-Oriented Programming in C</title>
      <link>https://davidraab.github.io/posts/object-oriented-programming-in-c/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/object-oriented-programming-in-c/</guid>
      <description>Let&amp;rsquo;s do object-oriented programming in C. First of I am creating an easy example for an Vector2 type. To define a Vector2 in C we use a struct.&#xA;1 2 3 4 struct Vector2 { int X; int Y; }; When you know C#, you are already familiar with a struct. A struct is a value-type in C. It always gets copied as a whole. In C# we have a class that is a reference-type but this doesn&amp;rsquo;t exist in C.</description>
    </item>
    <item>
      <title>Closures in F#, C#, Perl, JavaScript and Racket</title>
      <link>https://davidraab.github.io/posts/closures-in-fsharp-csharp-perl-javascript-and-racket/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/closures-in-fsharp-csharp-perl-javascript-and-racket/</guid>
      <description>Today, more and more languages supports functions as first-class values. This means a function is just a value like any other. You can pass functions as arguments to functions, but you are also able to create functions and return them from functions.&#xA;Whenever this is done we have to think about the life-time of variables. Usually all variables are lexical scoped. Consider the following example.&#xA;F# C# Perl JavaScript Racket 1 2 3 let add10 y = let x = 10 x + y 1 2 3 4 public static int Add10(int y) { var x = 10; return x + y; } 1 2 3 4 sub add10($y) { my $x = 10; return $x + $y; } 1 2 3 4 function add10(y) { const x = 10; return x + y; } 1 2 3 4 (define (add10 y) (define x 10) (+ x y) ) In the example the variable x is created only temporary when the function is being executed.</description>
    </item>
    <item>
      <title>Mutability vs. Immutability: Valid objects</title>
      <link>https://davidraab.github.io/posts/mutabaility-vs-immutability-validation/</link>
      <pubDate>Mon, 27 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/mutabaility-vs-immutability-validation/</guid>
      <description>I already wrote an article that explains immutability, but one thing I hand-waved was the benefits of immutability and why you should program with immutable values.&#xA;In this article I talk about those benefits by trying to maintaining valid objects at all time and show how we can achieve it with mutability and immutability.&#xA;One question might be why I&amp;rsquo;m not just showing the immutable part. I could do this, but the problem I see is that it isn&amp;rsquo;t so obvious how hard the mutable part really is.</description>
    </item>
    <item>
      <title>Introduction to Functional Programming</title>
      <link>https://davidraab.github.io/posts/introduction-to-functional-programming/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/introduction-to-functional-programming/</guid>
      <description>In this article I want to give a general introduction to some of the fundamental ideas of functional programming. I just start with the idea of function as data, and explain why functions are viewed as data and why it makes sense to pass functions as arguments.&#xA;When we understand this concept, I start explaining lambda expression, currying, partial application and closures. All of this ideas built on each other.</description>
    </item>
    <item>
      <title>null is Evil</title>
      <link>https://davidraab.github.io/posts/null-is-evil/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/null-is-evil/</guid>
      <description>Tony Hoare once said: I call it my billion-dollar mistake. It was the invention of the null reference in 1965. So, why did he added &amp;ldquo;null&amp;rdquo; in the first place? Why was it such a big mistake. And if it is such a big mistake, what are the alternatives?&#xA;The purpose of null To understand why it was a mistake, let&amp;rsquo;s look why it was even added in the first place.</description>
    </item>
    <item>
      <title>Introduction to F#</title>
      <link>https://davidraab.github.io/posts/introduction-fsharp/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/introduction-fsharp/</guid>
      <description>When I remember the first time I looked at functional(-first) languages like F#, ML, Haskell and others. The typical reaction that I had, and I always see from other people is: This is unreadable, it must be hard to read, it feels complicated and hard.&#xA;After spending some time in F# I cannot agree to that at all anymore. Often the syntax itself is easier (for example compared to C#), shorter and in my opinion more readable.</description>
    </item>
  </channel>
</rss>
