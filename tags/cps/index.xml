<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cps on David Raab</title>
    <link>https://davidraab.github.io/tags/cps/</link>
    <description>Recent content in Cps on David Raab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://davidraab.github.io/tags/cps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPS fold -- fold with early exit</title>
      <link>https://davidraab.github.io/posts/cps-fold/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/cps-fold/</guid>
      <description>The most general function to traverse a data-structures is the fold function. But fold has one problem that is sometimes not optimal. It always traverses the whole data-structure and we cannot abort the recusion early.&#xA;But sometimes, that is exactly what we want to do. For example when we want to search for a specific element in a list, when we found it, we don&amp;rsquo;t want to go through the remaing list.</description>
    </item>
    <item>
      <title>Continuations and foldBack</title>
      <link>https://davidraab.github.io/posts/continuations-and-foldback/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/continuations-and-foldback/</guid>
      <description>In From mutable loops to immutable folds we implemented foldBack through rev and fold. In this post I show you how you can implement foldBack by using a continuation function.&#xA;Functions Before we see how to implement foldBack, I want to give you analogy first. This analogy helped me in a lot of cases. I hope that this analogy will also help you in better understanding the further post, or probably even in other areas in programming in general.</description>
    </item>
    <item>
      <title>Understanding bind</title>
      <link>https://davidraab.github.io/posts/understanding-bind/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/understanding-bind/</guid>
      <description>In Understanding map we learned that implementing a map function is what we call a Functor. In Applicative Functors we extended that idea with the return and apply function and we call the result an Applicative Functor. The next important function in our toolset is the bind function.&#xA;Monads The combination of return and bind is what we call a Monad. But currently I will not consider this as an introduction to Monads at all.</description>
    </item>
  </channel>
</rss>
