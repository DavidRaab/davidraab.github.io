<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>General-Concepts on David Raab</title>
    <link>https://davidraab.github.io/tags/general-concepts/</link>
    <description>Recent content in General-Concepts on David Raab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Nov 2023 02:00:00 +0000</lastBuildDate>
    <atom:link href="https://davidraab.github.io/tags/general-concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assigning variables</title>
      <link>https://davidraab.github.io/posts/assigning-variables/</link>
      <pubDate>Sat, 18 Nov 2023 02:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/assigning-variables/</guid>
      <description>This is how you assign a value from right to left.&#xA;1 2 my $x = 1; ... this is how you assign a value from left to right.&#xA;Perl 1 do_something(12, sub ($x) { ... }); JavaScript 1 do_something(1, function(x) { ... }) F# 1 doSomething 1 (fun x -&amp;gt; ... ) </description>
    </item>
    <item>
      <title>Catamorphisms</title>
      <link>https://davidraab.github.io/posts/catamorphisms/</link>
      <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/catamorphisms/</guid>
      <description>Up to this point I created various articles about fold, in my Series I also created a category named Fold (Catamorphisms) but up till now I didn&amp;rsquo;t explained how this articles related to each other, or what Catamorphisms mean. In this article I want to talk about the remaining parts.&#xA;The List Catamorphisms is a generalization that emerged from the list data-structure. The list data-structure, how it is found in functional programming, is usually build as a single linked list.</description>
    </item>
    <item>
      <title>Monoids</title>
      <link>https://davidraab.github.io/posts/monoids/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/monoids/</guid>
      <description>A monoid is a simple concept. It is a generalization of some patterns that you very likely already have seen. Being aware of those can help in designing some operations and can simplify things. Without much further ado let us look at three simple math equations.&#xA;1 + 2 = 3 (1 + 2) + 3 = 1 + (2 + 3) 1 + 0 = 0 + 1 Table of Content Binary Operations Associativity Identity Monoids Subtraction Multiplication Division What is the purpose of all of this?</description>
    </item>
    <item>
      <title>Algebraic Data-Types</title>
      <link>https://davidraab.github.io/posts/algebraic-data-types/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/algebraic-data-types/</guid>
      <description>When we work in a programming language we usually have some primitive data-types likes int, float, string, bool and so on. All of those are important, but when we need to create more advanced logic we usually want to create our own data-types and group/compose different types together to create new data-types.&#xA;In an algebraic type-system there exists two different ways in how we can compose types. They are named Product-types and Sum-type.</description>
    </item>
    <item>
      <title>Sequence and Traverse</title>
      <link>https://davidraab.github.io/posts/sequence-and-traverse/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/sequence-and-traverse/</guid>
      <description>One problem that appears from time to time is that we we have some kind of collection (I use list here) and we want to map every element with a monadic function &#39;a -&amp;gt; M&amp;lt;&#39;b&amp;gt;. This then returns a list&amp;lt;M&amp;lt;&#39;a&amp;gt;&amp;gt;. But often we want a M&amp;lt;list&amp;lt;&#39;a&amp;gt;&amp;gt;.&#xA;To be more concrete. Let&amp;rsquo;s assume we want to turn a list of strings into integers. We could write a tryParseInt function that does string -&amp;gt; option&amp;lt;int&amp;gt;.</description>
    </item>
    <item>
      <title>Understanding bind</title>
      <link>https://davidraab.github.io/posts/understanding-bind/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/understanding-bind/</guid>
      <description>In Understanding map we learned that implementing a map function is what we call a Functor. In Applicative Functors we extended that idea with the return and apply function and we call the result an Applicative Functor. The next important function in our toolset is the bind function.&#xA;Monads The combination of return and bind is what we call a Monad. But currently I will not consider this as an introduction to Monads at all.</description>
    </item>
    <item>
      <title>Applicative Functors</title>
      <link>https://davidraab.github.io/posts/applicative-functors/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/applicative-functors/</guid>
      <description>In my previous article Understanding map I introduced the map function and described that implementing map and fulfilling two laws we get what we call a Functor. In this Post we discuss the apply function that we can view as an extension to the map function.&#xA;Problem with map It might be that you have noticed one problem with map. map only can work with one-argument functions! The definition of map expects a function &#39;a -&amp;gt; &#39;b as it&amp;rsquo;s first argument.</description>
    </item>
    <item>
      <title>Understanding map</title>
      <link>https://davidraab.github.io/posts/understanding-map/</link>
      <pubDate>Sun, 27 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/understanding-map/</guid>
      <description>One important function in functional programming is the map function. When I learned F# I must admit that I had some problems first, understanding it. The problem was, I already knew the map function from dozens of other languages. Or to say it correctly, I mostly learned a wrong explanation of map.&#xA;The typical explanation I&amp;rsquo;m talking about often goes something like this: map takes a function and a list. It applies the function to every element in the list, and returns a new list.</description>
    </item>
    <item>
      <title>Higher-kinded Polymorphism: What is it, why you want it</title>
      <link>https://davidraab.github.io/posts/higher-kinded-polymorphism/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/higher-kinded-polymorphism/</guid>
      <description>One aspect of a programming language that is often noted as important is the idea of Polymorphism. But there doesn&amp;rsquo;t exists just one type of polymorphism. In functional languages Parametric Polymorphism (aka Generics) is often used. Haskell was the first language that introduced &amp;ldquo;Higher-kinded polymorphism&amp;rdquo;. Sadly, F# don&amp;rsquo;t support this kind of polymorphism directly. Actually it only has partial support for it. So let&amp;rsquo;s look in what it is, and why you want it.</description>
    </item>
  </channel>
</rss>
