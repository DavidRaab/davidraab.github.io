<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on David Raab</title>
    <link>https://davidraab.github.io/tags/perl/</link>
    <description>Recent content in Perl on David Raab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://davidraab.github.io/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code as Data</title>
      <link>https://davidraab.github.io/posts/code-as-data/</link>
      <pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/code-as-data/</guid>
      <description>I have the following type definition.&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 my $album = t_hash( t_with_keys(qw/artist title tracks/), t_keys( artist =&amp;gt; t_str(t_min 1), # string must have at least 1 char title =&amp;gt; t_str(t_min 1), tracks =&amp;gt; t_array( t_min(1), # Array must have at least 1 entry t_of( t_hash( # All entries must be hashes t_with_keys(qw/name duration/), t_keys( name =&amp;gt; t_str, duration =&amp;gt; $duration)))))); this is code that builds a function that you can run and type check against any value.</description>
    </item>
    <item>
      <title>Moose Traits vs. Sq</title>
      <link>https://davidraab.github.io/posts/moose-traits-vs-sq/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/moose-traits-vs-sq/</guid>
      <description>Moose Traits vs. Sq (Explicit language) Did you ever hear of the Law of Demeter in object-orientation? Here is the idea behind it. Let&amp;rsquo;s assume we have a class, and that class has a property named options. This options is an array.&#xA;In procedural or functional programming we would just access that array and do whatever we wanna do with it. But somehow in object-orientation land people think this is bad.</description>
    </item>
    <item>
      <title>Benefits of Dynamic Typing</title>
      <link>https://davidraab.github.io/posts/benefits-of-dynamic-typing/</link>
      <pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/benefits-of-dynamic-typing/</guid>
      <description>This is not a post about static typing vs. dynamic typing. In the several past years I have worked with both and see advantages and disadvantages in both dynamic and static typing. While this might be an interesting topic on its own, this is maybe for a future post.&#xA;No matter what you like or dislike more, some languages are built from the core being either static or dynamic typed. Perl, including other languages like Python, Ruby, JavaScript, Lisp, Lua, &amp;hellip; are built as a dynamic typed language.</description>
    </item>
    <item>
      <title>Debian Tool: Purging config of removed packages</title>
      <link>https://davidraab.github.io/posts/debian-tool-purging-config-of-removed-packages/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/debian-tool-purging-config-of-removed-packages/</guid>
      <description>In Debian the following &amp;ldquo;problem&amp;rdquo; sometimes arrives. Let&amp;rsquo;s say you install for example Apache2, you do something with it but shortly after you don&amp;rsquo;t need it anymore. By default Debian always keeps all configuration files alive. So after installing Apache2 once, you are left with some configuration files in /etc/apache2/.&#xA;This is usually a good idea, because removing a package and re-installing shouldn&amp;rsquo;t delete all your configuration. But what do you do if you really want to delete the configuration because you really don&amp;rsquo;t need them anymore?</description>
    </item>
    <item>
      <title>Functions are interfaces</title>
      <link>https://davidraab.github.io/posts/functions-are-interfaces/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/functions-are-interfaces/</guid>
      <description>When I started to learn C# around 2013 there were certainly new things I came into contact. Some of them had todo with the fact that I primarily used Perl, a dynamic typed language, but in some sense the language features of Perl were also far ahead of C# back then, leading to different solutions and how you use a language.&#xA;Back at that time I realised that a lot of programmers were into a &amp;ldquo;newly&amp;rdquo; thing.</description>
    </item>
    <item>
      <title>Perl Argument Aliasing</title>
      <link>https://davidraab.github.io/posts/perl-argument-aliasing/</link>
      <pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/perl-argument-aliasing/</guid>
      <description>Different to many other languages Perl has an aliasing feature when you pass arguments to a function. As an example let&amp;rsquo;s see the following code.&#xA;1 2 3 sub increment { $_[0]++; } As probably known, all values in Perl are put into the @_ array. But when you directly modify one of these elements, then the original values are modified.&#xA;So executing the following.&#xA;1 2 3 4 5 6 7 my $x = 0; increment($x); say $x; increment($x); say $x; will print 1 and then 2.</description>
    </item>
    <item>
      <title>Class vs Hash</title>
      <link>https://davidraab.github.io/posts/class-vs-hash/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/class-vs-hash/</guid>
      <description>In my previous articles about object-orientation I explained how OO in general works. I used Perl for the explanation, as it doesn&amp;rsquo;t hide its itnernals like most other languages do. That&amp;rsquo;s Why I like Perl&amp;rsquo;s OO.&#xA;Usually OO works that we define a mutable data-structure and pass it to a function that mutates it. So in some sense calling func($obj, $arg1) is the same as $obj-&amp;gt;func($arg1). It&amp;rsquo;s just a different syntax and order we write, but the concept is the same.</description>
    </item>
    <item>
      <title>Why I Like Perl&#39;s OO</title>
      <link>https://davidraab.github.io/posts/why-i-like-perls-oo/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/why-i-like-perls-oo/</guid>
      <description>I started programming with QBasic and later C. While it was difficult to learn those languages back then (with no internet and just some books) nothing felt &amp;ldquo;out of place&amp;rdquo; for me.&#xA;For example, when I learned about arrays the first time, it took some time to learn the concept of it, that it is a storage of multiple elements one after another. How it is used and what you can do with it.</description>
    </item>
    <item>
      <title>Insanity of Object-Oriented Programming</title>
      <link>https://davidraab.github.io/posts/insanity-of-oo/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/insanity-of-oo/</guid>
      <description>The insanity of Object-Oriented Programming I started programming back in the 1990s. My first language I learned was QBasic and after 2 days of learning it, i switched to C. Back in these days there was no Internet. Okay, it existed but was not so common as today. Most people still didn&amp;rsquo;t even had computers.&#xA;I picked and learned C because when you got to the programming section in a store it was full of C books.</description>
    </item>
    <item>
      <title>Seq::Manual::FromSub</title>
      <link>https://davidraab.github.io/posts/perl-seq-seq-manual-fromsub/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/perl-seq-seq-manual-fromsub/</guid>
      <description>Seq::Manual::FromSub A deeper explanation how Seq-&amp;gt;from_sub works.&#xA;THE PROBLEM You could write the following in Perl&#xA;1 Seq-&amp;gt;wrap(1 .. 10_000_000) but it would be a bad idea. Perls range operator is non-lazy. When you call the above code perl will create an array with 10 Mio numbers and then pass that 10 Mio numbers to Seq-&amp;gt;wrap.&#xA;This is not only time-consuming, it will also use a lot of memory. Maybe with a bigger number your program or your computer could even crash with out of memory.</description>
    </item>
    <item>
      <title>Perl Seq: bind &amp; cartesian</title>
      <link>https://davidraab.github.io/posts/perl-seq-bind-and-cartesian/</link>
      <pubDate>Mon, 20 Nov 2023 20:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/perl-seq-bind-and-cartesian/</guid>
      <description>The cartesian function returns the Cartesian Product. The Cartesian Product is the combination of all possible values.&#xA;1 2 3 4 5 my $data = Seq::cartesian( Seq-&amp;gt;wrap(qw/clubs spades hearts diamond/), Seq-&amp;gt;wrap(qw/7 8 9 10 B D K A/), )-&amp;gt;to_array; Calling to_array will evaluate the expression and generates the following Perl data-structure.&#xA;1 2 3 4 5 6 7 8 9 10 [ [&amp;#39;clubs&amp;#39; ,&amp;#39;7&amp;#39;],[&amp;#39;clubs&amp;#39; ,&amp;#39;8&amp;#39;],[&amp;#39;clubs&amp;#39; ,&amp;#39;9&amp;#39;],[&amp;#39;clubs&amp;#39; ,&amp;#39;10&amp;#39;], [&amp;#39;clubs&amp;#39; ,&amp;#39;B&amp;#39;],[&amp;#39;clubs&amp;#39; ,&amp;#39;D&amp;#39;],[&amp;#39;clubs&amp;#39; ,&amp;#39;K&amp;#39;],[&amp;#39;clubs&amp;#39; ,&amp;#39;A&amp;#39; ], [&amp;#39;spades&amp;#39; ,&amp;#39;7&amp;#39;],[&amp;#39;spades&amp;#39; ,&amp;#39;8&amp;#39;],[&amp;#39;spades&amp;#39; ,&amp;#39;9&amp;#39;],[&amp;#39;spades&amp;#39; ,&amp;#39;10&amp;#39;], [&amp;#39;spades&amp;#39; ,&amp;#39;B&amp;#39;],[&amp;#39;spades&amp;#39; ,&amp;#39;D&amp;#39;],[&amp;#39;spades&amp;#39; ,&amp;#39;K&amp;#39;],[&amp;#39;spades&amp;#39; ,&amp;#39;A&amp;#39; ], [&amp;#39;hearts&amp;#39; ,&amp;#39;7&amp;#39;],[&amp;#39;hearts&amp;#39; ,&amp;#39;8&amp;#39;],[&amp;#39;hearts&amp;#39; ,&amp;#39;9&amp;#39;],[&amp;#39;hearts&amp;#39; ,&amp;#39;10&amp;#39;], [&amp;#39;hearts&amp;#39; ,&amp;#39;B&amp;#39;],[&amp;#39;hearts&amp;#39; ,&amp;#39;D&amp;#39;],[&amp;#39;hearts&amp;#39; ,&amp;#39;K&amp;#39;],[&amp;#39;hearts&amp;#39; ,&amp;#39;A&amp;#39; ], [&amp;#39;diamond&amp;#39;,&amp;#39;7&amp;#39;],[&amp;#39;diamond&amp;#39;,&amp;#39;8&amp;#39;],[&amp;#39;diamond&amp;#39;,&amp;#39;9&amp;#39;],[&amp;#39;diamond&amp;#39;,&amp;#39;10&amp;#39;], [&amp;#39;diamond&amp;#39;,&amp;#39;B&amp;#39;],[&amp;#39;diamond&amp;#39;,&amp;#39;D&amp;#39;],[&amp;#39;diamond&amp;#39;,&amp;#39;K&amp;#39;],[&amp;#39;diamond&amp;#39;,&amp;#39;A&amp;#39; ], ] The implementation of Seq::cartesian.</description>
    </item>
    <item>
      <title>Perl Seq: Combination with I/O</title>
      <link>https://davidraab.github.io/posts/seq-in-combination-with-io/</link>
      <pubDate>Mon, 20 Nov 2023 01:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/seq-in-combination-with-io/</guid>
      <description>In one of my programs I already use my module. This program creates a new test-file in the &amp;rsquo;t&amp;rsquo; folder from a template. From all files in that directory I want to automatically pick the next highest number. I don&amp;rsquo;t want to search for the number myself.&#xA;So here is how i read all files from disk and only pick files matching the pattern &amp;ldquo;%d-$title.t&amp;rdquo;. Then i want the maximum number.</description>
    </item>
    <item>
      <title>Perl Seq: bind &amp; flatten</title>
      <link>https://davidraab.github.io/posts/perl-seq-module-bind-flatten/</link>
      <pubDate>Sun, 19 Nov 2023 02:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/perl-seq-module-bind-flatten/</guid>
      <description>I implemented the bind function in my Perl Seq Module. bind is a very useful function. For example here is flatten that I implemented with it.&#xA;flatten Flatten takes a sequence of sequences and returns a single sequence.&#xA;1 2 3 4 5 6 my $flattened = Seq-&amp;gt;wrap( Seq-&amp;gt;wrap(1,1), Seq-&amp;gt;wrap(2,3,5,8,13), ) -&amp;gt;flatten; This is how a non-lazy Perl implemenation would look like:&#xA;1 2 3 4 5 6 7 8 9 sub flatten($aoa) { my @flattened; for my $outer ( @$aoa ) { for my $inner ( @$outer ) { push @flattened, $inner; } } return \@flattened; }; Using it looks very similar.</description>
    </item>
    <item>
      <title>Shape of my Heart</title>
      <link>https://davidraab.github.io/posts/shape-of-my-heart/</link>
      <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/shape-of-my-heart/</guid>
      <description>Here are two programs that produces the same result.&#xA;This is something I would have written without my Seq module.&#xA;1 2 3 4 5 6 [ (map { [clubs =&amp;gt; $_ ] } qw/7 8 9 10 B D K A/), (map { [spades =&amp;gt; $_ ] } qw/7 8 9 10 B D K A/), (map { [hearts =&amp;gt; $_ ] } qw/7 8 9 10 B D K A/), (map { [diamond =&amp;gt; $_ ] } qw/7 8 9 10 B D K A/), ] With my module, i now can write the same in this way.</description>
    </item>
    <item>
      <title>Perl Seq: Three ways of doing Fibonacci</title>
      <link>https://davidraab.github.io/posts/lazy-sequence-in-perl-three-ways-of-doing-fibonacci/</link>
      <pubDate>Sat, 18 Nov 2023 01:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/lazy-sequence-in-perl-three-ways-of-doing-fibonacci/</guid>
      <description>Hi there, I am developing a new Perl module to bring a lazy Sequence to Perl.&#xA;It should provide the functionaly you see in C# LINQ or Java 8 Stream. The origin of those interfaces comes from functional programming. Thus i decided to primarily pick the F# API and port it to Perl.&#xA;I already implemented a useful set of functions. Here is an example of the module and what you can do with it.</description>
    </item>
    <item>
      <title>Linux Tool: Searching for a Linux Command</title>
      <link>https://davidraab.github.io/posts/searching-for-a-linux-command/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/searching-for-a-linux-command/</guid>
      <description>Lately I wanted to search for a Linux Command.&#xA;I didn&amp;rsquo;t knew the exact command, only that there must be a &amp;ldquo;wacom&amp;rdquo; in it. A configuration tool to set some more details of my wacom tablet. So I thought.&#xA;Hey, just collect all binary files in all the directores in the PATH Environment of Linux. The Path environment is divided with colons. Just let me give it a Regex it can match against.</description>
    </item>
    <item>
      <title>Creating a real enum Type in Perl</title>
      <link>https://davidraab.github.io/posts/creating-a-real-enum-type-in-perl/</link>
      <pubDate>Sun, 29 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/creating-a-real-enum-type-in-perl/</guid>
      <description>In my previous article about Metaprogramming in Perl I show how to implement an enum() function that creates real special values that are distinct from each other.&#xA;When I called enum(&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;) it created two functions for every passed string. red() and is_red() for the red string. red() returns the special value and is_red($value) checks if $value is our special value.&#xA;But currently it does not completely satisfy being an enum.</description>
    </item>
    <item>
      <title>Meta-Programming in Perl</title>
      <link>https://davidraab.github.io/posts/meta-programming-in-perl/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/meta-programming-in-perl/</guid>
      <description>In my last article about Special Values in Perl I explained how we can create true distinct values that can be safely distinguished by other values. The final result looked like this:&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 use Scalar::Util qw(refaddr reftype); # Special values Red, Green and Blue { # &amp;lt;-- this creates a new lexical-scope my ($red, $green, $blue) = ([], [], []); sub red { $red } sub green { $green } sub blue { $blue } my $is_color = sub { my ($source, $color) = @_; my $type = reftype($source) // &amp;#39;&amp;#39;; return ( $type eq &amp;#39;ARRAY&amp;#39; and refaddr($source) == refaddr($color) ) ?</description>
    </item>
    <item>
      <title>Special values in Perl</title>
      <link>https://davidraab.github.io/posts/special-values-in-perl/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/special-values-in-perl/</guid>
      <description>Sometimes in programming we want to create special values that are distinct to anything else. Consider the following problem. We want to create a print_colored function, that can be given special values to change the terminal color. Here is one way to do it:&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use Term::ANSIColor qw(color); my $red = &amp;#34;RED&amp;#34;; my $green = &amp;#34;GREEN&amp;#34;; my $blue = &amp;#34;BLUE&amp;#34;; sub print_colored { for my $line ( @_ ) { print(color(&amp;#39;red&amp;#39;)) &amp;amp;&amp;amp; next if $line eq $red; print(color(&amp;#39;green&amp;#39;)) &amp;amp;&amp;amp; next if $line eq $green; print(color(&amp;#39;blue&amp;#39;)) &amp;amp;&amp;amp; next if $line eq $blue; print $line; } } print_colored($green, &amp;#34;red&amp;#34;, &amp;#34;\n&amp;#34;, $blue, &amp;#34;foo\n&amp;#34;); This solution successfully prints the string &amp;ldquo;red&amp;rdquo; in the green color and &amp;ldquo;foo&amp;rdquo; in the blue color.</description>
    </item>
    <item>
      <title>Perl vs. JavaScript: Scalar and List Context</title>
      <link>https://davidraab.github.io/posts/perl-vs-javascript-scalar-and-list-context/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/perl-vs-javascript-scalar-and-list-context/</guid>
      <description>Something I like in Perl, and also dislike sometimes, is Perl distinction between Scalar- and List Context. Something I haven&amp;rsquo;t seen in any other language so far. In Perl any function call can happen in two different context. And depending on the context a function can return different things, or even behave differently. But it also effects how arguments are passed to a function.&#xA;Let&amp;rsquo;s see an example. I want to write an easy sum function that sums up all numbers given to it.</description>
    </item>
    <item>
      <title>Installing perl with perlbrew</title>
      <link>https://davidraab.github.io/posts/installing-perl-with-perlbrew/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/installing-perl-with-perlbrew/</guid>
      <description>Today every Linux system mostly already ships Perl including a lot of modules. While this can be totally fine sometimes maybe you want to switch to a newer Perl version. Or maybe even an older version to test a module with an older Perl version for compatibility?&#xA;perlbrew is a tool that helps installing multiple Perl environments and gives you the ability to switch between them. Installing your own Perl also means you don&amp;rsquo;t mess with the system installed Perl and you are able to install any new module directly from CPAN.</description>
    </item>
    <item>
      <title>Closures in F#, C#, Perl, JavaScript and Racket</title>
      <link>https://davidraab.github.io/posts/closures-in-fsharp-csharp-perl-javascript-and-racket/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/closures-in-fsharp-csharp-perl-javascript-and-racket/</guid>
      <description>Today, more and more languages supports functions as first-class values. This means a function is just a value like any other. You can pass functions as arguments to functions, but you are also able to create functions and return them from functions.&#xA;Whenever this is done we have to think about the life-time of variables. Usually all variables are lexical scoped. Consider the following example.&#xA;F# C# Perl JavaScript Racket 1 2 3 let add10 y = let x = 10 x + y 1 2 3 4 public static int Add10(int y) { var x = 10; return x + y; } 1 2 3 4 sub add10($y) { my $x = 10; return $x + $y; } 1 2 3 4 function add10(y) { const x = 10; return x + y; } 1 2 3 4 (define (add10 y) (define x 10) (+ x y) ) In the example the variable x is created only temporary when the function is being executed.</description>
    </item>
    <item>
      <title>Perl Regex Parsing with the g option</title>
      <link>https://davidraab.github.io/posts/perl-regex-parsing-with-g-option/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://davidraab.github.io/posts/perl-regex-parsing-with-g-option/</guid>
      <description>Perl regexes have the /g modifier that is worth knowing about, as you can do a lot of advanced things with this modifier. But here are the basics first.&#xA;Context First we need to understand that Perl has two different contexts and in both contexts the /g modifier works differently.&#xA;List context Let&amp;rsquo;s see list context first. We can enforce list context by assigning to an array.&#xA;Without the /g option a regex just finds its first match and just returns it.</description>
    </item>
  </channel>
</rss>
