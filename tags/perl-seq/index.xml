<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>perl-seq on David Raab</title>
    <link>https://davidraab.github.io/tags/perl-seq/</link>
    <description>Recent content in perl-seq on David Raab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Nov 2023 01:00:00 +0000</lastBuildDate><atom:link href="https://davidraab.github.io/tags/perl-seq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lazy Sequence in Perl: Three ways of doing Fibonacci</title>
      <link>https://davidraab.github.io/posts/lazy-sequence-in-perl-three-ways-of-doing-fibonacci/</link>
      <pubDate>Sat, 18 Nov 2023 01:00:00 +0000</pubDate>
      
      <guid>https://davidraab.github.io/posts/lazy-sequence-in-perl-three-ways-of-doing-fibonacci/</guid>
      <description>Hi there, I am developing a new Perl module to bring a lazy Sequence to Perl.
It should provide the functionaly you see in C# LINQ or Java 8 Stream. The origin of those interfaces comes from functional programming. Thus i decided to primarily pick the F# API and port it to Perl.
I already implemented a useful set of functions. Here is an example of the module and what you can do with it.</description>
    </item>
    
  </channel>
</rss>
