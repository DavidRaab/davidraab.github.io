<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sequence on David Raab</title>
    <link>https://davidraab.github.io/tags/sequence/</link>
    <description>Recent content in sequence on David Raab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://davidraab.github.io/tags/sequence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lazy Sequence in Perl: Three ways of doing Fibonacci</title>
      <link>https://davidraab.github.io/posts/lazy-sequence-in-perl-three-ways-of-doing-fibonacci/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://davidraab.github.io/posts/lazy-sequence-in-perl-three-ways-of-doing-fibonacci/</guid>
      <description>First solution 1 2 3 4 5 6 7 8 9 10 11 12 13 my $fib = Seq-&amp;gt;concat( Seq-&amp;gt;wrap(1,1), Seq-&amp;gt;unfold([1,1], sub($state) { my $next = $state-&amp;gt;[0] + $state-&amp;gt;[1]; return $next, [$state-&amp;gt;[1],$next]; }) ); is( $fib-&amp;gt;take(20)-&amp;gt;to_array, [1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765], &amp;#39;First 20 Fibonacci numbers&amp;#39;); Second Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Same Fibonacci as above but unfold does not create a new arrayref on every # iteration.</description>
    </item>
    
  </channel>
</rss>
